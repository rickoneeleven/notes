# NotesApp Line Numbering Enhancement with CodeMirror - Product Requirements Document
**Version:** 2.0
**Date:** 2024-03-08
**Author/Elicitor:** AI Lead Software Architect (Consulting with User)
**Revision incorporates feedback from AI Programming Collaborator.**

## 1. Introduction and Goals
### 1.1. Project Overview
This project focuses on refactoring the existing plain textarea-based note editor within the "NotesApp" application. The current editor's custom line numbering solution does not function correctly with word-wrapped text, leading to a poor user experience. This refactor will replace the textarea with CodeMirror 6, a robust JavaScript-based text editor component. The primary goal is to implement accurate line numbering that works seamlessly with word-wrapped text, while preserving all existing application functionality and maintaining the current look and feel as closely as possible.

### 1.2. Project Goals
*   **Goal 1:** Successfully replace the existing HTML textarea editor with a CodeMirror 6 instance, managed via a dedicated `EditorManager.js` module.
*   **Goal 2:** Implement accurate line numbering within the CodeMirror editor that correctly aligns with logical lines, even when those lines are visually word-wrapped.
*   **Goal 3:** Ensure all existing core application functionalities (note creation, loading, saving, editing, deletion, autosave, public/private toggles, asset management context, inter-client auto-updates) continue to operate as expected with the new editor component.
*   **Goal 4:** Maintain or improve the editor's performance for typical note sizes.
*   **Goal 5:** Adhere to established development principles, including modular code design (specifically through the new `EditorManager.js`), robust logging, and file size constraints (<= 400 lines for new/refactored integration code).

### 1.3. Target Audience / User Personas
The target audience remains the same as the existing NotesApp:
*   **Persona 1: Public User**
    *   **Description:** Casual visitors who may view public notes or edit `public_editable` notes.
    *   **Needs:** Clear, readable display of note content; intuitive editing for permitted notes.
    *   **Motivations:** Quickly consume or contribute to shared information.
*   **Persona 2: Authenticated User (Admin)**
    *   **Description:** The primary administrator who creates, manages, and organizes all notes.
    *   **Needs:** A reliable and efficient editor for frequent note-taking and management; accurate representation of content, including line structure.
    *   **Motivations:** Productive and frictionless note management.

### 1.4. Recommended Code Context for Implementation
The codebase prior to any attempts to implement the custom gutter (as per user's reverted state) will be the baseline. The development team will primarily work with the following files and directories from that clean state to integrate CodeMirror:

**Recommended Files/Directories for Task Master AI / Developer:**
*   `public/index.html` (for modifying the editor DOM structure)
*   `public/css/style.css` (for CodeMirror theming and integrating its styles)
*   `public/js/NotesApp.js` (for high-level editor state management and interaction with `EditorManager.js`)
*   **`public/js/EditorManager.js` (New File):** This module will encapsulate all direct CodeMirror 6 setup, API interactions (getting/setting content, state changes), and event handling specific to CodeMirror.
*   `public/js/UIManager.js` (for adapting UI state controls and delegating editor-specific UI updates to `EditorManager.js`)
*   `public/js/EventHandler.js` (for adapting editor event listeners, potentially by interacting with `EditorManager.js`)
*   `package.json` (newly created, for managing npm dependencies like Vite and CodeMirror)
*   `vite.config.js` (new, for configuring the Vite build process)

**Rationale for Selection:** This selection covers the HTML structure for the editor, CSS for styling, the core JavaScript modules directly interacting with or managing the editor component (with `EditorManager.js` abstracting CodeMirror specifics), and the necessary configuration files for the build system and package management. This approach promotes modularity and focused responsibilities, aligning with the "Analytically Manageable & Focused Modules for AI Processing" guiding pillar. Other JavaScript modules (`AssetManager.js`, `AuthManager.js`, etc.) are relevant for understanding the overall application flow but are not expected to require direct modification for this specific editor replacement task.

**Note to the Development Team (Task Master AI / Human Developer):** The files and directories listed above represent the Architect's recommendation for the most relevant code context for this project/task. A new feature branch should be created for this refactoring work.

## 2. Functional Requirements & User Stories
### 2.1. Core Feature: CodeMirror Editor Integration
**Description:** Replace the existing HTML `<textarea>` with a CodeMirror 6 instance, managed via a new `EditorManager.js` module. The new editor must support core text editing, accurate line numbering with word wrap, and integrate seamlessly with existing application features.
**User Stories:**
*   **US1.1:** As an Authenticated User, when I open or create a note, I want to see line numbers displayed accurately next to the text, correctly aligning with each logical line even if it wraps, so that I can easily reference specific lines.
    *   **Acceptance Criteria:**
        *   AC1: Line numbers are visible in a gutter to the left of the editor content.
        *   AC2: Each logical line of text has exactly one corresponding line number.
        *   AC3: Line numbers correctly align with the first visual line of their corresponding logical line, regardless of word wrapping.
        *   AC4: Line numbers update correctly and immediately upon text input (typing, pasting, deleting lines).
        *   AC5: The line number gutter scrolls in perfect synchronization with the editor content.
*   **US1.2:** As any User (viewing or editing a note), I want the text within the editor to word-wrap automatically so that I don't have to scroll horizontally to read long lines.
    *   **Acceptance Criteria:**
        *   AC1: Long lines of text that exceed the editor's width automatically wrap to the next visual line.
        *   AC2: Word wrapping does not interfere with the accuracy of logical line numbering.
*   **US1.3:** As an Authenticated User, I want to be able to edit note content (type, delete, paste, cut) within the CodeMirror editor, and have these changes trigger existing autosave functionality, so that my work is preserved.
    *   **Acceptance Criteria:**
        *   AC1: Standard text editing operations are functional within CodeMirror.
        *   AC2: Changes to the editor content, managed via `EditorManager.js`, trigger the existing autosave mechanism in `NotesApp.js`.
        *   AC3: Content fetched from CodeMirror (via `EditorManager.js`) for saving accurately reflects the user's input.
*   **US1.4:** As any User, when a note is loaded into the editor, I want its content to be displayed correctly within the CodeMirror instance, so that I can view or edit it.
    *   **Acceptance Criteria:**
        *   AC1: When a note is selected, its full content is loaded into the CodeMirror editor via `EditorManager.js`.
        *   AC2: When the application initializes with a note specified in the URL, that note's content is loaded into CodeMirror via `EditorManager.js`.
*   **US1.5:** As an Authenticated User, when I clear the current note view (e.g., after deleting a note or logging out), I want the CodeMirror editor to be cleared and display its default empty state, so that the UI is consistent.
    *   **Acceptance Criteria:**
        *   AC1: CodeMirror editor content is emptied via `EditorManager.js`.
        *   AC2: Line numbering resets to show "1" for the empty state.

## 3. Technical Architecture
### 3.1. System Overview & Components
The primary change involves the Frontend Web App component.
*   **Component A: Frontend Web App (NotesApp)**
    *   **Purpose:** Provides the user interface for note-taking and management. This refactor specifically targets its editor component.
    *   **Key Technologies/Changes:**
        *   Vanilla JavaScript (ES Modules for application logic).
        *   **`EditorManager.js` (New Module):** Will encapsulate all CodeMirror 6 instantiation, configuration, direct API interactions (e.g., `setContent`, `getContent`, `setReadOnly`), and CM-specific event handling. This promotes modularity and simplifies `NotesApp.js`.
        *   **CodeMirror 6:** (npm packages: e.g., `@codemirror/state`, `@codemirror/view`, `@codemirror/commands`, `@codemirror/language`, `@codemirror/theme-one-dark`) will be the underlying editor, managed by `EditorManager.js`.
        *   **Vite:** npm-based build tool chosen for managing JavaScript dependencies (CodeMirror), bundling, and providing a development server.
    *   **Rationale:**
        *   CodeMirror 6 is chosen for its robust handling of complex editor features like line numbering with word wrap, its modularity, and good performance.
        *   `EditorManager.js` is introduced to adhere to Single Responsibility and Modularity principles, making the integration cleaner and more maintainable, especially for AI-driven refactoring.
        *   Vite is chosen for its speed, ease of use with vanilla JS/ES modules, and efficient bundling capabilities.
*   **Component B: Backend API (PHP)**
    *   **Purpose:** Handles data storage, business logic, and authentication.
    *   **Key Technologies:** PHP.
    *   **Rationale:** No changes are expected to the backend API for this frontend refactoring.
*   **Component C: JSON File Storage**
    *   **Purpose:** Persists note data.
    *   **Key Technologies:** JSON files.
    *   **Rationale:** No changes are expected to the storage mechanism.

### 3.2. Data Models
No changes to the existing backend data models (`note.json` structure) are required for this frontend refactoring.

### 3.3. APIs and Integrations
No changes to existing internal or external APIs are required. The frontend will continue to interact with the existing PHP backend API as before.

### 3.4. Infrastructure Requirements
*   **Development Environment:**
    *   Node.js and npm (for installing Vite and CodeMirror packages, running dev server, building assets).
*   **Deployment:**
    *   The Vite build process (e.g., `npx vite build`) will generate static HTML, CSS, and bundled JavaScript files. These static assets will be deployed to the web server, replacing the existing ones. No changes to server-side PHP requirements.
    *   Ensure `.gitignore` is updated to exclude `node_modules/` and the Vite build output directory (typically `dist/`).

## 4. Non-Functional Requirements (NFRs)
### 4.1. Performance
*   Editor (via `EditorManager.js`) should initialize and load typical note content (< 500 lines) within 500ms.
*   Typing and editing responsiveness should feel instantaneous.
*   Autosave operations should not block the UI.
### 4.2. Scalability
*   The editor component should handle notes up to a few thousand lines without significant performance degradation, though typical usage is smaller.
### 4.3. Security
*   No new security considerations are introduced by this frontend component change, beyond ensuring that the CodeMirror library is sourced securely (via npm from reputable sources).
### 4.4. Usability
*   Line numbering must be accurate and intuitive, enhancing readability.
*   The editor must remain accessible and keyboard-navigable.
*   Word wrapping should be enabled by default.
*   The editor should visually integrate with the existing dark theme.
### 4.5. Reliability / Availability
*   The editor component, managed by `EditorManager.js`, must be stable and not prone to crashing or data loss during editing.
*   All interactions with CodeMirror must include robust error handling (e.g., `try/catch` blocks).
### 4.6. Maintainability
*   CodeMirror integration logic will be centralized within `EditorManager.js`. This module, and any significantly modified existing modules, must adhere to the project's <= 400 lines per file heuristic and be well-structured.
*   `NotesApp.js` will delegate editor-specific tasks to `EditorManager.js`, simplifying its own logic.
*   `UIManager.js` should be simplified by the removal of custom line-numbering code and will delegate editor-specific UI updates to `EditorManager.js` where appropriate.
*   Using npm for CodeMirror management improves dependency maintainability.
### 4.7. Diagnosable & Verifiable Execution via Logging (Crucial NFR)
*   **Requirement:** Meticulous logging must be implemented for all critical operations, state changes, and data flows related to the CodeMirror integration, primarily within `EditorManager.js`.
*   **Details:**
    *   Log CodeMirror instance initialization attempts, parameters, and success/failure.
    *   Log when content is set into CodeMirror (e.g., `EditorManager.setContent()`), including a snippet or length of the content.
    *   Log when content is retrieved from CodeMirror (e.g., `EditorManager.getContent()`), including a snippet or length.
    *   Log significant CodeMirror events being handled (e.g., content changes relevant for autosave).
    *   Log changes to CodeMirror's state if managed externally (e.g., toggling read-only mode via `EditorManager.setReadOnly()`).
    *   Log any errors caught during interactions with the CodeMirror API, including full error messages and stack traces where possible.
*   **Rationale:** This detailed runtime transcript is essential for the AI Programming Collaborator's human counterpart to verify behavior and diagnose issues in the "no automated tests" environment. This directly supports the "Diagnosable & Verifiable Execution via Logging" guiding pillar.

## 5. Development Roadmap
### Phase 1: CodeMirror Integration & Core Functionality
**Goal:** Replace the existing textarea with CodeMirror 6 (abstracted by `EditorManager.js`) and ensure all current application features related to note editing and management are functional, with comprehensive logging.
**Features/Components:**
*   **Setup Build Environment & Install Dependencies**
    *   Initialize `package.json`.
    *   Install Vite and required CodeMirror 6 packages via npm.
    *   Configure basic Vite setup (`vite.config.js`) for development and build.
    *   Update `.gitignore`.
*   **HTML & CSS Modifications**
    *   Modify `public/index.html` to replace textarea/custom gutter with a CodeMirror mount point.
    *   Integrate a base CodeMirror dark theme (e.g., `oneDark`).
    *   Add custom CSS overrides in `public/css/style.css` as needed to align CodeMirror's appearance.
*   **`EditorManager.js` - Core Implementation (US1.1, US1.2)**
    *   Create `public/js/EditorManager.js`.
    *   Implement `EditorManager.init(mountPointElement, initialState)`: Initializes CodeMirror `EditorView` with line numbers, word wrapping (`EditorView.lineWrapping`), theme, and basic keymaps. Attaches to `mountPointElement`.
    *   Implement `EditorManager.setContent(text)` and `EditorManager.getContent()`.
    *   Implement `EditorManager.setReadOnly(isReadOnly)`.
    *   Implement mechanism to dispatch CodeMirror content change events (for autosave).
    *   Ensure all methods have robust logging as per NFR 4.7.
*   **Integrate `EditorManager.js` with `NotesApp.js` (US1.4, US1.5)**
    *   In `NotesApp.js`, instantiate `EditorManager`.
    *   Modify `selectNote`, `clearCurrentNote`, and URL loading logic to call `EditorManager.setContent()`, `EditorManager.getContent()`, etc.
*   **Integrate Note Content Saving & Autosave (US1.3)**
    *   Modify `NotesApp.js` (`saveCurrentNote`, `scheduleAutosave`) to use `EditorManager.getContent()`.
    *   Adapt `EventHandler.js` (or `NotesApp.js`) to listen for content change events from `EditorManager.js` to trigger autosave.
*   **Preserve UI State Sync (Read-Only, Placeholders)**
    *   Modify `UIManager.js` to call `EditorManager.setReadOnly()` based on authentication and note properties.
    *   Replicate placeholder behavior.
*   **Testing & Refinement**
    *   Thoroughly test all existing note operations and editor interactions.
    *   Verify line numbering accuracy and wrapping across different scenarios.
    *   Verify auto-update functionality between clients.
    *   **Verify comprehensive logging output via browser console during runtime testing.**
    *   Refine CSS and CodeMirror configuration within `EditorManager.js` as needed.

## 6. Logical Dependency Chain
1.  **Development Environment Setup (Node, npm, Vite):** Must be done first.
2.  **CodeMirror Package Installation:** Depends on (1).
3.  **HTML Structure Update:** Defines where CodeMirror will mount.
4.  **`EditorManager.js` Core Implementation:** Encapsulates CodeMirror. Depends on (2).
5.  **`NotesApp.js` Integration with `EditorManager.js`:** Links app logic to the new editor facade. Depends on (4).
    *   Content Loading/Setting Logic
    *   Content Getting/Saving Logic
6.  **Event Handling Adaptation (`EventHandler.js`/`NotesApp.js`):** Connects editor changes to app logic (autosave) via `EditorManager.js`. Depends on (4), (5).
7.  **Styling and Theming (CSS):** Visual integration.
8.  **UI State Synchronization (`UIManager.js` with `EditorManager.js`):** Depends on (4).

## 7. Risks and Mitigations
### 7.1. Technical Challenges
*   **Learning Curve for CodeMirror 6 API (within `EditorManager.js`):**
    *   **Description:** The developer (AI or human) implementing `EditorManager.js` will need to understand CodeMirror 6's state and view system.
    *   **Likelihood:** Medium
    *   **Impact:** Medium
    *   **Mitigation:** Encapsulating complexity in `EditorManager.js` isolates this. Allocate time for documentation review. Start with basic examples.
*   **Theme Customization Complexity:**
    *   **Description:** Achieving a perfect visual match with the existing theme.
    *   **Likelihood:** Medium
    *   **Impact:** Low
    *   **Mitigation:** Start with `oneDark`. Prioritize function. Iterate styling.
*   **Performance with Very Large Notes:**
    *   **Description:** Potential lag with extremely large notes.
    *   **Likelihood:** Low
    *   **Impact:** Medium
    *   **Mitigation:** Focus on typical use cases. CodeMirror's virtualization helps.

### 7.2. Scope Creep
*   **Temptation to Add More CodeMirror Features Prematurely:**
    *   **Description:** Resisting adding CM features beyond the defined scope.
    *   **Likelihood:** Medium
    *   **Impact:** Medium
    *   **Mitigation:** Strictly adhere to Phase 1. Log desired features for future.

## 8. Assumptions
*   The existing backend API and data structures will remain unchanged.
*   A stable internet connection for npm package downloads.
*   Node.js and npm are installed on the development/testing system.
*   The core application logic in `NotesApp.js` for note handling is sound and needs its editor interaction points updated to use `EditorManager.js`.
*   The `oneDark` CodeMirror theme is an acceptable base.
*   The AI Programming Collaborator will define the initial structure and methods of `EditorManager.js` aligning with these requirements and best practices.

## 9. Out of Scope (for this Phase 1 PRD)
*   Implementing advanced CodeMirror features beyond those needed for US1.1-US1.5 (e.g., syntax highlighting, code folding, advanced search/replace UI, keymap customization beyond defaults, multiple cursors).
*   Changing the overall visual theme of the application beyond smooth CodeMirror integration.
*   Mobile-specific optimizations for CodeMirror.
*   Implementing a custom CodeMirror theme from scratch.

## 10. Appendix (Optional)
**Glossary of Terms:**
*   **CodeMirror 6 (CM6):** The specific version of the JavaScript editor library.
*   **Vite:** JavaScript build tool for managing dependencies and bundling.
*   **npm:** Node Package Manager.
*   **`EditorManager.js`:** New custom module to abstract and manage CodeMirror 6 interactions.
*   **EditorView (CM6):** The CM component managing the visible editor.
*   **EditorState (CM6):** The CM component holding editor content, selection, config.
*   **Dispatch (CM6):** Mechanism for updating an EditorView's state.